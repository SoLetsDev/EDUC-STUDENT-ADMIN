pipeline{
  agent any

  environment{
    DEBUG_OUTPUT = 'false'

    NAMESPACE='c2mvws'
    COMMON_NAMESPACE='mvubjx'
    TOOLS = 'c2mvws-tools'
    DEV = 'c2mvws-dev'
    TEST = 'c2mvws-test'
    PROD = 'c2mvws-prod'
    REPO_NAME = 'educ-student-admin'
    TESTS_REPO_NAME = 'educ-e2e-pen-registry'
    OWNER = 'bcgov'
    JOB_NAME = 'master'

    APP_NAME = 'student-admin'
    APP_DOMAIN = 'pathfinder.gov.bc.ca'

    SOURCE_REPO_RAW = 'https://github.com/${OWNER}/${REPO_NAME}/master'
    SOURCE_REPO_REF = 'master'
    SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'

    TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
    DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
    TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
    PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"
    MIN_REPLICAS = "1"
    MAX_REPLICAS = "1"
    MIN_CPU = "25m"
    MAX_CPU = "50m"
    MIN_MEM = "150Mi"
    MAX_MEM = "250Mi"    
  }

  stages {
    stage('Initialize') {
      steps {
        script {
          if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }
        }
      }
    }
    stage('Build'){
      steps{
        script {
          openshift.withCluster(){
            openshift.withProject(TOOLS){
              parallel(
                      Backend: {
                        try{
                          echo "Building backend..."
                          def bcBackend = openshift.process('-f', 'tools/openshift/backend.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")
                          openshift.apply(bcBackend).narrow('bc').startBuild('-w').logs('-f')

                          openshift.tag("${REPO_NAME}-backend:latest", "${REPO_NAME}-backend:${JOB_NAME}")
                        } catch(e) {
                          echo "Backend build failed"
                          throw e
                        }
                      },
                      Frontend: {
                        try {
                          echo "Building frontend..."
                          def bcFrontend = openshift.process('-f', 'tools/openshift/frontend.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")

                          openshift.apply(bcFrontend).narrow('bc').startBuild('-w').logs('-f')
                          openshift.tag("${REPO_NAME}-frontend:latest", "${REPO_NAME}-frontend:${JOB_NAME}")

                          def bcFrontendStatic = openshift.process('-f', 'tools/openshift/frontend-static.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "NAMESPACE=${TOOLS}")
                          openshift.apply(bcFrontendStatic).narrow('bc').startBuild('-w').logs('-f')
                          openshift.tag("${REPO_NAME}-frontend-static:latest", "${REPO_NAME}-frontend-static:${JOB_NAME}")
                        } catch(e) {
                          echo "Frontend build failed"
                          throw e
                        }
                      })
            }
          }
        }
      }
      post {
        success {
          echo 'Cleanup BuildConfigs...'
          script {
            openshift.withCluster() {
              openshift.withProject(TOOLS) {
                if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                  echo "DEBUG - Using project: ${openshift.project()}"
                } else {
                  def bcBackend = openshift.selector('bc', "${REPO_NAME}-backend-${JOB_NAME}")
                  def bcFrontend = openshift.selector('bc', "${REPO_NAME}-frontend-${JOB_NAME}")
                  def bcFrontendStatic = openshift.selector('bc', "${REPO_NAME}-frontend-static-${JOB_NAME}")

                  if(bcBackend.exists()){
                    echo "Removing BuildConfig ${REPO_NAME}-backend-${JOB_NAME}..."
                    bcBackend.delete()
                  }
                  if(bcFrontend.exists()) {
                    echo "Removing BuildConfig ${REPO_NAME}-frontend-${JOB_NAME}..."
                    bcFrontend.delete()
                  }
                  if(bcFrontendStatic.exists()) {
                    echo "Removing BuildConfig ${REPO_NAME}-frontend-static-${JOB_NAME}..."
                    bcFrontendStatic.delete()
                  }
                }
              }
            }
          }
        }
        failure {
          echo 'Build stage failed'
        }
      }
    }
	stage('Promote and configure DEV') {
      steps{
        script{
            extJSHelper.performUIDeploy(STAGING_ENV, TARGET_ENVIRONMENT, REPO_NAME, APP_NAME, JOB_NAME, TAG, TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN, DC_URL, MIN_REPLICAS, MAX_REPLICAS, MIN_CPU, MAX_CPU, MIN_MEM, MAX_MEM, TARGET_ENV, NAMESPACE, COMMON_NAMESPACE)
        }
      }
      post{
        success{
          echo 'Deployment to Dev was successful'
        }
        failure{
          echo 'Deployment to Dev failed'
        }
      }
    }
    stage('e2e tests'){
      steps {
        script {
          withCredentials([string(credentialsId: 'c2mvws-tools-github-actions-token', variable: 'TOKEN')]) {
            triggerWorkflow(TOKEN)
            waitForWorkflowRunComplete(TOKEN)
          }
        }
      }
    }
  }
}
